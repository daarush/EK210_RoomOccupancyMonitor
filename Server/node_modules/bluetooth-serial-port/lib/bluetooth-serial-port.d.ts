const express = require('express');
const bodyParser = require('body-parser');
const { BluetoothSerialPort } = require('bluetooth-serial-port');

// Create an instance of BluetoothSerialPort
const bluetoothSerialPort = new BluetoothSerialPort();

// Set the MAC address of your Arduino's Bluetooth module
const arduinoMACAddress = 'XX:XX:XX:XX:XX:XX';  // Replace with your Arduino's Bluetooth MAC address

// Create an instance of Express
const app = express();
const port = 3000;

// Use body-parser to parse JSON request bodies
app.use(bodyParser.json());

// Function to connect to the Arduino
function connectToArduino() {
    // Find the serial port channel and connect to the Arduino
    bluetoothSerialPort.findSerialPortChannel(arduinoMACAddress, function(channel) {
        bluetoothSerialPort.connect(arduinoMACAddress, channel, function() {
            console.log('Connected to Arduino');
            // Connection established, set up event listeners
            setupArduinoCommunication();
        }, function() {
            console.log('Cannot connect to Arduino');
        });
    });
}

// Function to set up event listeners for Arduino communication
function setupArduinoCommunication() {
    // Event listener for data received from Arduino
    bluetoothSerialPort.on('data', function(buffer) {
        const receivedData = buffer.toString('utf-8');
        console.log(`Received data from Arduino: ${receivedData}`);
        // Handle the received data as needed (e.g., save it or process it)
    });
}

// Call the function to connect to the Arduino
connectToArduino();

// HTTP endpoint to send data to Arduino
app.post('/send-to-arduino', (req, res) => {
    const dataToSend = req.body.data;
    bluetoothSerialPort.write(Buffer.from(dataToSend, 'utf-8'), function(err, bytesWritten) {
        if (err) {
            console.error('Error writing data:', err);
            res.status(500).send('Error writing data to Arduino');
        } else {
            console.log(`Sent ${bytesWritten} bytes to Arduino`);
            res.send('Data sent to Arduino');
        }
    });
});

// HTTP endpoint to receive data from Arduino
app.get('/receive-from-arduino', (req, res) => {
    // You can use a buffer or a queue to store the data received from Arduino
    // and serve it when this endpoint is called. Here we just return a placeholder.
    res.send('Data from Arduino would be returned here');
});

// Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
